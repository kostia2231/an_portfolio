---
import "../styles/global.css";
type Image = {
    url: string;
    transformed_url: string;
};
const res = await fetch(
    "https://subtle-palmier-ae368e.netlify.app/api/data.json",
);
const res_obj = await res.json();
const imgs: Image[] = res_obj.resources;
const img_urls = imgs.map((img) => img.transformed_url);
---

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Anastasiia Potapova</title>
    {img_urls.map((url) => <link rel="preload" as="image" href={url} />)}
    <link rel="icon" href="/favicon-16x16.png" type="image/png" />
    <link
        rel="stylesheet"
        href="https://unpkg.com/lenis@1.3.1/dist/lenis.css"
    />
    <script is:inline src="https://unpkg.com/lenis@1.3.1/dist/lenis.min.js"
    ></script>
</head>
<div class="text-[12px] max-[500px]:text-[12px] bg-white">
    <div
        class="mt-4 fixed w-screen z-30 mix-blend-difference text-white max-[500px]:hidden handle_from_top"
    >
        <div class="text-center">
            <a id="view_change_button" class="cursor-pointer hover:opacity-50"
                >View</a
            >
        </div>
    </div>
    <div
        class="mb-4 fixed w-screen z-30 mix-blend-difference text-white bottom-0 handle_from_bottom"
    >
        <div class="text-center">Â©2025</div>
    </div>
    <div
        class="fixed px-4 mt-[50vh] max-[500px]:px-4 w-screen text-white max-[500px]:mt-[47vh] mix-blend-difference z-30 max-w-[1440px] pointer-events-none"
        id="middle"
    >
        <div class="flex justify-between">
            <div class="handle_from_left">
                <p>Anastasiia Potapova</p>
            </div>
            <div class="flex gap-4 handle_from_right pointer-events-auto">
                <a href="https://www.instagram.com/ana.sta.sea/">
                    <p class="cursor-pointer hover:opacity-50">Instagram</p>
                </a>
                <a href="mailto:potapova.nana@gmail.com">
                    <p class="cursor-pointer hover:opacity-50">E-mail</p>
                </a>
            </div>
        </div>
    </div>
    <div id="loader" class="flex">
        <p class="m-auto mt-[47vh] max-[500px]:mt-[47vh]">
            <span id="progress">0</span>%
        </p>
    </div>

    <img
        src=""
        id="image_overlay"
        class="rounded-xs fixed h-[80vh] left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 pointer-events-none z-10 transition-opacity duration-500 ease-out opacity-0"
    />
    <div
        id="content"
        style="visibility: hidden;"
        class="transition-all duration-500 ease-out"
    >
        <div
            class="flex flex-col items-center justify-center max-[500px]:w-[100vw] max-[500px]:p-1 max-[500px]:mx-0 w-full transition-all duration-500 ease-out"
            id="img_scroll_area_one"
        >
            <div
                id="img_wrapper"
                class="flex flex-nowrap flex-col justify-center gap-1 max-[500px]:gap-1 items-center overflow-hidden my-4 max-[500px]:my-0 max-[500px]:grid-cols-1 w-fit min-[500px]:pt-8 pb-8 max-[500px]:pb-12 opacity-100"
            >
                {
                    img_urls.map((url) => (
                        <div
                            class="relative w-fit overflow-hidden rounded-xs will-change-[filter]"
                            id="img_group"
                        >
                            <img
                                id="img_static"
                                src={url}
                                alt="img"
                                class="max-[500px]:h-auto max-[500px]:w-full object-cover rounded-xs h-[75vh] scale-[1.02] transition-all duration-500 ease-out will-change-[filter] filter opacity-0"
                            />
                        </div>
                    ))
                }
            </div>
        </div>

        <div
            class="hidden flex-col items-center justify-center max-[500px]:w-[100vw] max-[500px]:p-1 max-[500px]:mx-0 w-full transition-all"
            id="img_scroll_area_two"
        >
            <div
                class="grid grid-cols-4 w-full max-w-[800px] mx-auto my-4 max-[500px]:grid-cols-1 max-[500px]:my-0 pt-8 pb-8 px-2 h-fit"
            >
                {
                    img_urls.map((url) => (
                        <div class="overflow-hidden w-fit h-fit">
                            <img
                                id="img_static"
                                src={url}
                                alt="img"
                                class="w-full h-auto object-cover transition-all duration-500 ease-out p-[2px] rounded-[3.5px]"
                            />
                        </div>
                    ))
                }
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            if ("scrollRestoration" in history) {
                history.scrollRestoration = "manual";
            }

            setTimeout(() => {
                if (typeof (window as any).Lenis === "function") {
                    const lenis = new (window as any).Lenis({
                        duration: 1,
                        easing: (t: number) =>
                            Math.min(1, 1.001 - Math.pow(2, -10 * t)),
                        direction: "vertical",
                        smooth: true,
                        smoothTouch: false,
                        touchMultiplier: 2,
                    });

                    (window as any).lenisInstance = lenis;

                    function raf(time: number) {
                        lenis.raf(time);
                        requestAnimationFrame(raf);
                    }

                    requestAnimationFrame(raf);

                    const check_elements = () => {
                        const middleZoneHeight = window.innerHeight * 0.001;
                        const middleTop =
                            window.innerHeight / 2 - middleZoneHeight / 2;
                        const middleBottom =
                            window.innerHeight / 2 + middleZoneHeight / 2;

                        const imgs_first_view = document.querySelectorAll(
                            "#img_scroll_area_one img",
                        );
                        imgs_first_view?.forEach((i) => {
                            const rect = i.getBoundingClientRect();
                            const isInCenter =
                                rect.top < middleBottom &&
                                rect.bottom > middleTop;

                            (i as any).style.filter = isInCenter
                                ? "blur(0px)"
                                : "blur(4px)";
                        });
                    };

                    lenis.on("scroll", check_elements);
                }
            }, 200);

            const images = document.images;
            const imgs_first_view = document.querySelectorAll(
                "#img_scroll_area_one img",
            ) as NodeListOf<HTMLImageElement>;
            const imgs_second_view = document.querySelectorAll(
                "#img_scroll_area_two img",
            ) as NodeListOf<HTMLImageElement>;
            const progress = document.getElementById("progress");
            const loader = document.getElementById("loader");
            const content = document.getElementById("content");
            const view_change_button =
                document.getElementById("view_change_button");
            const image_area_one = document.getElementById(
                "img_scroll_area_one",
            );
            const image_area_two = document.getElementById(
                "img_scroll_area_two",
            );
            const image_overlay = document.getElementById(
                "image_overlay",
            ) as HTMLImageElement;

            let loaded = 0;
            let view = false;
            const total = images.length;

            const toggle_blur = () => {
                imgs_first_view.forEach((img) => {
                    img.style.opacity = "1";
                    img.style.filter = "blur(0px)";
                });
            };

            toggle_blur();

            const change_view = () => {
                if (view) {
                    image_area_one!.style.display = "flex";
                    image_area_two!.style.display = "none";
                } else {
                    image_area_one!.style.display = "none";
                    image_area_two!.style.display = "flex";
                }
                view = !view;
                window.scrollTo(0, 0);

                if ((window as any).lenisInstance) {
                    (window as any).lenisInstance.scrollTo(0, {
                        immediate: true,
                    });
                }

                show_first();
                image_overlay.src = "";
            };

            view_change_button?.addEventListener("click", () => {
                change_view();
            });

            const check_elements = () => {
                const middleZoneHeight = window.innerHeight * 0.001;
                const middleTop = window.innerHeight / 2 - middleZoneHeight / 2;
                const middleBottom =
                    window.innerHeight / 2 + middleZoneHeight / 2;

                imgs_first_view?.forEach((i) => {
                    const rect = i.getBoundingClientRect();
                    const isInCenter =
                        rect.top < middleBottom && rect.bottom > middleTop;

                    i.style.filter = isInCenter ? "blur(0px)" : "blur(4px)";
                });
            };

            const show_first = () => {
                imgs_first_view[0].style.filter = "blur(0px)";
            };

            const update_perc = () => {
                loaded++;
                const perc = Math.round((loaded / total) * 100).toString();
                if (progress) progress.textContent = perc;

                if (loaded === total) {
                    if (loader) loader.style.display = "none";
                    if (content) content.style.visibility = "visible";

                    check_elements();
                    show_first();
                }
            };

            for (let i = 0; i < total; i++) {
                if (images[i].complete) {
                    update_perc();
                } else {
                    images[i].addEventListener("load", update_perc);
                    images[i].addEventListener("error", update_perc);
                }
            }

            const onScroll = () => {
                requestAnimationFrame(() => {
                    const middleZoneHeight = window.innerHeight * 0.001;
                    const middleTop =
                        window.innerHeight / 2 - middleZoneHeight / 2;
                    const middleBottom =
                        window.innerHeight / 2 + middleZoneHeight / 2;

                    imgs_first_view?.forEach((i) => {
                        const rect = i.getBoundingClientRect();
                        const isInCenter =
                            rect.top < middleBottom && rect.bottom > middleTop;

                        i.style.filter = isInCenter ? "blur(0px)" : "blur(4px)";
                    });
                });
            };

            window.addEventListener("scroll", onScroll);

            imgs_second_view.forEach((img) => {
                img.addEventListener("mouseover", () => {
                    image_overlay.src = img.src;
                    image_overlay.style.opacity = "1";
                    content!.style.opacity = "0.2";
                });

                img.addEventListener("mouseleave", () => {
                    image_overlay.style.opacity = "0";
                    content!.style.opacity = "1";
                });
            });
        });
    </script>
</div>
