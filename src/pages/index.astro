---
import "../styles/global.css";

type Image = {
    url: string;
    transformed_url: string;
};

const res = await fetch(
    "https://subtle-palmier-ae368e.netlify.app/api/data.json",
);
const res_obj = await res.json();
const imgs: Image[] = res_obj.resources;
const img_urls = imgs.map((img) => img.transformed_url);
---

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Anastasia</title>
    {img_urls.map((url) => <link rel="preload" as="image" href={url} />)}

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet"
    />
</head>

<div class="text-[12px] bg-white">
    <div
        class="fixed px-4 mt-[50vh] max-[500px]:px-4 w-screen text-white max-[500px]:mt-[49vh] mix-blend-difference z-30 max-w-[1440px]"
    >
        <div class="flex justify-between">
            <div class="handle_from_left">
                <p>Anastasia Potapova</p>
            </div>
            <div class="flex gap-4 handle_from_right">
                <a href="https://www.instagram.com/ana.sta.sea/">
                    <p class="cursor-pointer hover:opacity-50">Instagram</p>
                </a>
                <a href="mailto:potapova.nana@gmail.com">
                    <p class="cursor-pointer hover:opacity-50">E-mail</p>
                </a>
            </div>
        </div>
    </div>
    <div id="loader" class="flex">
        <p class="m-auto mt-[50vh] max-[500px]:mt-[49vh]"><span id="progress">0</span>%</p>
    </div>

    <div id="content" style="visibility: hidden;">
    <div
        class="flex flex-col items-center justify-center max-[500px]:w-[100vw] max-[500px]:p-1 max-[500px]:mx-0 w-full transition-all"
        id="img_scroll_area"
    >
        <div
            id="img_wrapper"
            class="flex flex-nowrap flex-col justify-center gap-1 items-center overflow-hidden my-4 max-[500px]:my-0 max-[500px]:grid-cols-1 w-fit"
        >
            {
                img_urls.map((url, index) => {
                    return (
                        <div class="relative w-fit" id="img_group">
                            <div
                                data-={index}
                                id="bg_blured"
                                class="absolute w-full inset-0 z-10 transition-all backdrop-blur-sm duration-700 ease-in-out handle_blur rounded-xs"
                            />
                            <img
                                loading="eager"
                                decoding="async"
                                id="img_static"
                                src={url}
                                alt="img"
                                class="max-[500px]:h-auto max-[500px]:w-full object-cover handle_blur rounded-xs h-[75vh] "
                            />
                        </div>
                    );
                })
            }
        </div>
    </div>
</div>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  if ("scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }

  const imgWrapper = document.getElementById("img_wrapper");
  const imgs = imgWrapper?.querySelectorAll("img[id=img_static]");
  const images = document.images;
  const progress = document.getElementById("progress");
  const loader = document.getElementById("loader");
  const content = document.getElementById("content");
  const bgBlured = document.querySelectorAll("#bg_blured");

  let loaded = 0;
  const total = images?.length || 0;

  const updateProgress = () => {
    if (loaded <= total) {
      progress!.textContent = Math.floor((loaded / total) * 100).toString();

      if (loaded === total) {
        loader!.style.display = "none";
        content!.style.visibility = "visible";

        // Даем браузеру полностью отрисовать DOM перед проверкой
        window.scrollTo(0, 0);

        // Используем requestIdleCallback, если доступен
        const finishSetup = () => {
          checkElements(); // Точное позиционирование
        };

        if ('requestIdleCallback' in window) {
          requestIdleCallback(finishSetup, { timeout: 200 });
        } else {
          setTimeout(finishSetup, 100);
        }
      }
    }
  };

  const handleImageLoad = (img) => {
    const inc = () => {
      loaded++;
      updateProgress();
    };

    img.onload = inc;
    img.onerror = inc;

    if (img.complete) inc();
  };

  imgs?.forEach((img) => {
    if (img instanceof HTMLImageElement) {
      img.decode?.()
        .then(() => {
          img.setAttribute("decoded", "true");
          handleImageLoad(img);
        })
        .catch(() => {
          handleImageLoad(img);
        });

      if (img.complete) {
        handleImageLoad(img);
      }
    }
  });

  const checkElements = () => {
    const middleScreen = window.innerHeight / 2;

    bgBlured.forEach((bg) => {
      const rect = bg.getBoundingClientRect();
      const isInCenter = rect.top <= middleScreen && rect.bottom >= middleScreen;
      bg.classList.toggle("backdrop-blur-sm", !isInCenter);
      if(!isInCenter){
        bg.classList.add("backdrop-blur-sm")
      }
    });
  };

  const onScroll = () => {
    requestAnimationFrame(checkElements);
  };

  window.addEventListener("scroll", onScroll);

  const overview = document.getElementById("overview");
  if (overview instanceof HTMLAnchorElement) {
    overview.addEventListener("mouseenter", () => {
      const url = overview.href;
      if (url && !document.getElementById("prefetch_link")) {
        const prefetch = document.createElement("link");
        prefetch.id = "prefetch_link";
        prefetch.rel = "prefetch";
        prefetch.href = url;
        document.head.appendChild(prefetch);
      }
    });
  }
});
</script>
