---
import "../styles/global.css";
type Image = {
    url: string;
    transformed_url: string;
};
const res = await fetch(
    "https://subtle-palmier-ae368e.netlify.app/api/data.json",
);
const res_obj = await res.json();
const imgs: Image[] = res_obj.resources;
const img_urls = imgs.map((img) => img.transformed_url);
---

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Anastasia</title>
    {img_urls.map((url) => <link rel="preload" as="image" href={url} />)}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet"
    />
</head>
<div class="text-[12px] bg-white">
    <div
        class="fixed px-4 mt-[50vh] max-[500px]:px-4 w-screen text-white max-[500px]:mt-[49vh] mix-blend-difference z-30 max-w-[1440px]"
    >
        <div class="flex justify-between">
            <div class="handle_from_left">
                <p>Anastasia Potapova</p>
            </div>
            <div class="flex gap-4 handle_from_right">
                <a href="https://www.instagram.com/ana.sta.sea/">
                    <p class="cursor-pointer hover:opacity-50">Instagram</p>
                </a>
                <a href="mailto:potapova.nana@gmail.com">
                    <p class="cursor-pointer hover:opacity-50">E-mail</p>
                </a>
            </div>
        </div>
    </div>
    <div id="loader" class="flex">
        <p class="m-auto mt-[50vh] max-[500px]:mt-[49vh]">
            <span id="progress">0</span>%
        </p>
    </div>
    <div id="content" class="hidden">
        <div
            class="flex flex-col items-center justify-center max-[500px]:w-[100vw] max-[500px]:p-1 max-[500px]:mx-0 w-full transition-all"
            id="img_scroll_area"
        >
            <div
                id="img_wrapper"
                class="flex flex-nowrap flex-col justify-center gap-1 items-center overflow-hidden my-4 max-[500px]:my-0 max-[500px]:grid-cols-1 w-fit"
            >
                {
                    img_urls.map((url) => (
                        <div
                            class="relative w-fit overflow-hidden rounded-xs"
                            id="img_group"
                        >
                            <img
                                id="img_static"
                                src={url}
                                alt="img"
                                class="max-[500px]:h-auto max-[500px]:w-full object-cover rounded-xs h-[75vh] blur-sm scale-[1.1] transition-all duration-500"
                            />
                        </div>
                    ))
                }
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            if ("scrollRestoration" in history) {
                history.scrollRestoration = "manual";
            }

            const images = document.images;
            const imgs = document.querySelectorAll("#img_static");
            const progress = document.getElementById("progress");
            const loader = document.getElementById("loader");
            const content = document.getElementById("content");

            let loaded = 0;
            const total = images.length;

            const checkElements = () => {
                const middleScreen = window.innerHeight / 2;

                imgs?.forEach((i) => {
                    const rect = i.getBoundingClientRect();
                    const isInCenter =
                        rect.top <= middleScreen && rect.bottom >= middleScreen;
                    i.classList.toggle("blur-sm", !isInCenter);
                    i.classList.toggle("scale-[1.1]", !isInCenter);
                });
            };

            const show_first = () => {
                imgs[0].classList.remove("blur-sm");
                imgs[0].classList.remove("scale-[1.1]");
            };

            const update_perc = () => {
                loaded++;
                const perc = Math.round((loaded / total) * 100);
                progress!.textContent = perc.toString();

                if (loaded === total) {
                    loader!.style.display = "none";
                    content!.style.display = "block";
                    checkElements();
                    show_first();
                }
            };
            for (let i = 0; i < total; i++) {
                if (images[i].complete) {
                    update_perc();
                } else {
                    images[i].addEventListener("load", update_perc);
                    images[i].addEventListener("error", update_perc);
                }
            }

            const onScroll = () => {
                requestAnimationFrame(checkElements);
            };

            window.addEventListener("scroll", onScroll);
        });
    </script>
</div>
