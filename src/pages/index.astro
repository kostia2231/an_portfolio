---
import "../styles/global.css";

type Image = {
    url: string;
    transformed_url: string;
};

const res = await fetch(
    "https://subtle-palmier-ae368e.netlify.app/api/data.json",
);
const res_obj = await res.json();
const imgs: Image[] = res_obj.resources;
const img_urls = imgs.map((img) => img.transformed_url);
---

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Anastasia</title>
    {img_urls.map((url) => <link rel="preload" as="image" href={url} />)}

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet"
    />
</head>

<div class="text-[12px] bg-white">
    <div
        class="fixed px-4 mt-[50vh] max-[500px]:px-4 w-screen text-white max-[500px]:mt-[49vh] mix-blend-difference z-30 max-w-[1440px]"
    >
        <div class="flex justify-between">
            <div class="handle_from_left">
                <p>Anastasia Potapova</p>
            </div>
            <div class="flex gap-4 handle_from_right">
                <!-- <div class="flex gap-1">
                    <a href="/overview" id="overview">
                        <p
                            class="cursor-pointer max-[500px]:hidden hover:opacity-50"
                        >
                            Overview
                        </p></a
                    >
                </div> -->
                <a href="https://www.instagram.com/ana.sta.sea/">
                    <p class="cursor-pointer hover:opacity-50">Instagram</p>
                </a>
                <a href="mailto:potapova.nana@gmail.com">
                    <p class="cursor-pointer hover:opacity-50">E-mail</p>
                </a>
            </div>
        </div>
    </div>
    <div id="loader" class="flex">
        <p class="m-auto mt-[50vh] max-[500px]:mt-[49vh]"><span id="progress">0</span>%</p>
    </div>
    <div id="content" class="">
    <div
        class="flex flex-col items-center justify-center max-[500px]:w-[100vw] max-[500px]:p-1 max-[500px]:mx-0 w-full transition-all"
        id="img_scroll_area"
    >
        <div
            id="img_wrapper"
            class="flex flex-nowrap flex-col justify-center gap-1 items-center overflow-hidden my-4 max-[500px]:my-0 max-[500px]:grid-cols-1 w-fit"
        >
            {
                img_urls.map((url, index) => {
                    return (
                        <div class="relative w-fit" id="img_group">
                            <div
                                data-={index}
                                id="bg_blured"
                                class="absolute w-full inset-0 z-10 transition-all backdrop-blur-sm duration-700 ease-in-out handle_blur rounded-xs"
                            />
                            <img
                                loading="lazy"
                                decoding="async"
                                id="img_static"
                                src={url}
                                alt="img"
                                class="max-[500px]:h-auto max-[500px]:w-full object-cover handle_blur rounded-xs h-[75vh] "
                            />
                        </div>
                    );
                })
            }
        </div>
    </div>
    </div>
    <!-- <script src="../scripts/index.js"></script> -->
</div>

<script>


    document.addEventListener("DOMContentLoaded", async () => {
        const img_wrapper: HTMLElement | null =
            document.getElementById("img_wrapper");

        const imgs: NodeListOf<HTMLImageElement> | undefined =
            img_wrapper?.querySelectorAll<HTMLImageElement>(
                "img[id=img_static]",
            );

        imgs?.forEach((img) => {
            img.decode()
                .then(() => {
                    img.setAttribute("decoded", "true");
                })
                .catch((err) => {
                    console.error(
                        `error decoding image ${img.src}:`,
                        (err as Error).message,
                    );
                });
        });

        const total = imgs!.length
        let loaded = 0

        const update_process = () =>{
          loaded++
          const percent = Math.floor((loaded/total) * 100)
          const progress = document.getElementById("progress")
          const loader = document.getElementById("loader")
          const content = document.getElementById("content")
          progress!.textContent = percent.toString()

          if(loaded === total){
            loader?.classList.add("hidden")
            content?.classList.remove("hidden")
          }
        }

        for (let img of imgs!){
          if(img.complete){
            update_process()
          } else{
            img.addEventListener("load", update_process)
            img.addEventListener("error", () => {
              console.error(`Image failed to load: ${img.src}`);
              update_process()
            });
          }
        }

        console.log(`no-one was here\n13am.org`);
        if ("scrollRestoration" in history) {
            history.scrollRestoration = "manual";
        }

        const overview: HTMLAnchorElement = document.getElementById(
            "overview",
        ) as HTMLAnchorElement;
        if (overview) {
            overview.addEventListener("mouseenter", () => {
                const url = overview.href;
                if (!url) return;

                const prefetch = document.createElement("link");
                const is_prefetch_link =
                    document.getElementById("prefetch_link");
                if (!is_prefetch_link) document.head.appendChild(prefetch);
                prefetch.id = "prefetch_link";
                prefetch.rel = "prefetch";
                prefetch.href = url;
            });
        }

        const params: URLSearchParams = new URLSearchParams(
            window.location.search,
        );
        const index: number = parseInt(params.get("img") || "0");

        const bg_blured: NodeListOf<Element> =
            document.querySelectorAll("#bg_blured");

        bg_blured[index].scrollIntoView({
            behavior: "instant",
            block: "center",
        });


        let ticking: boolean = false;
        function check_elements() {
            const middle_screen: number = window.innerHeight / 2;

            bg_blured.forEach((bg) => {
                const rect: DOMRect = bg.getBoundingClientRect();

                if (rect.top <= middle_screen && rect.bottom >= middle_screen) {
                    bg.classList.remove("backdrop-blur-sm");
                } else {
                    bg.classList.add("backdrop-blur-sm");
                }
            });
            ticking = false;
        }

        function on_scroll() {
            if (!ticking) {
                requestAnimationFrame(check_elements);
                ticking = true;
            }
        }

        if (window) {
            bg_blured[0].classList.remove("backdrop-blur-sm");
            window.addEventListener("scroll", on_scroll);
        }

        window.addEventListener("load", () => {
            imgs?.forEach((img) => {
                img.decode()
                    .then(() => {
                        img.setAttribute("decoded", "true");
                    })
                    .catch((err) => {
                        console.error(
                            `error decoding image ${img.src}:`,
                            (err as Error).message,
                        );
                    });
            });
        });
    });
</script>
