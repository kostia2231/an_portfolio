---
import "../styles/global.css";

type Image = {
    url: string;
    transformed_url: string;
};

const res = await fetch(
    "https://subtle-palmier-ae368e.netlify.app/api/data.json",
    // "http://localhost:8888/api/data.json",
);
const res_obj = await res.json();
const imgs: Image[] = res_obj.resources;

const first_img: string = imgs[1].transformed_url;
const img_urls = imgs.map((img) => img.transformed_url);
---

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Anastasia</title>
    {img_urls.map((url) => <link rel="preload" as="image" href={url} />)}

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet"
    />
</head>

<div class="text-[12px] bg-white">
    <div class="fixed mt-[50vh]" id="center"></div>
    <div
        class="fixed px-4 mt-[49vh] w-screen text-white/90 max-[500px]:mt-2 mix-blend-difference h-2 z-30"
    >
        <div class="flex justify-between">
            <div class="handle_from_left">
                <p>Anastasia Potapova</p>
            </div>
            <div class="flex gap-4 handle_from_right">
                <p class="active:text-black/20 cursor-pointer">Instagram</p>
                <p class="active:text-black/20 cursor-pointer">E-mail</p>
            </div>
        </div>
    </div>
    <div
        class="flex flex-col items-center justify-center max-[500px]:w-[100vw]"
    >
        <div
            id="img_wrapper"
            class="flex flex-col gap-4 w-fit my-4 items-center overflow-hidden max-[500px]:my-0"
        >
            {
                img_urls.map((url) => {
                    return (
                        <div>
                            <div
                                class="relative handle_animation"
                                id="img_group"
                            >
                                <div
                                    id="bg_blured"
                                    class="absolute inset-0 backdrop-blur-md z-10 transition-all duration-600 ease-out handle_blur"
                                />
                                <img
                                    loading="eager"
                                    decoding="async"
                                    id="img_static"
                                    src={url}
                                    alt="img"
                                    class="h-[80vh] max-[500px]:h-auto max-[500px]:w-full object-cover"
                                />
                            </div>
                        </div>
                    );
                })
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", async () => {
        if ("scrollRestoration" in history) {
            history.scrollRestoration = "manual";
        }

        const img_wrapper = document.getElementById("img_wrapper");
        const bg_blured = document.querySelectorAll("#bg_blured");
        const img_group = document.querySelectorAll("#img_group");
        const center = document.querySelector("#center");
        const imgs =
            img_wrapper?.querySelectorAll<HTMLImageElement>(
                "img[id=img_static]",
            );

        window.addEventListener("load", () => {
            bg_blured[0].classList.remove("backdrop-blur-md");

            imgs?.forEach((img) => {
                img.decode()
                    .then(() => {
                        // console.log(`Image ${img.src} decoded successfully!`);
                        img.setAttribute("decoded", "true");
                    })
                    .catch((err) => {
                        console.error(`Error decoding image ${img.src}:`, err);
                    });
            });

            img_group.forEach((group, index) => {
                const group_element = group as HTMLElement;
                group_element.style.animationDuration = `${1000 + index * 300}ms`;
            });
        });

        window.addEventListener("scroll", () => {
            bg_blured?.forEach((bg) => {
                if (bg) {
                    const img_rect = bg.getBoundingClientRect();
                    const text_rect = center?.getBoundingClientRect();

                    if (
                        text_rect &&
                        img_rect.top <= text_rect?.bottom &&
                        img_rect.bottom >= text_rect?.top
                    ) {
                        bg.classList.remove("backdrop-blur-md");
                    } else {
                        bg.classList.add("backdrop-blur-md");
                    }
                }
            });
        });
    });
</script>
